# Ref.: https://github.com/EventStore/samples/blob/main/Logging/Elastic/Filebeat/docker-compose.yml
# map logs to disk location and share between containers
x-eventstore-volume-logs:
  &eventstore-volume-logs
  type: bind
  source: ./test/log/siga/sigaex
  target: /var/log/siga/sigaex

version: "2.4"

volumes:
  elasticsearch-volume:
    driver: local
  log-volume:
    driver: local
  data:
    driver: local  
networks:
  elk_network:
    driver: bridge

services:
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION}
    hostname: elasticsearch
    environment:
      CONFIG_DIR: ${ELASTIC_DIR}/config
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ES_JAVA_OPTS: -Xmx${ELASTICSEARCH_HEAP} -Xms${ELASTICSEARCH_HEAP}
      TZ: America/Sao_Paulo
    volumes:
      - data:${ELASTIC_DIR}/data
      - ./elasticsearch/config/elasticsearch.yml:${ELASTIC_DIR}/config/elasticsearch.yml:ro
      - ./elasticsearch/config/certificates/instance/instance.crt:${ELASTIC_DIR}/config/certificates/instance/instance.crt:ro
      - ./elasticsearch/config/certificates/instance/instance.key:${ELASTIC_DIR}/config/certificates/instance/instance.key:ro
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - elk_network
    healthcheck:
      test: curl -s https://elasticsearch:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 10s
      timeout: 10s
      retries: 120
  ########enterprisesearch
  enterprisesearch:
    container_name: enterprisesearch
    image: docker.elastic.co/enterprise-search/enterprise-search:${ELK_VERSION}
    ports:
      - 3002:3002
    depends_on:
      elasticsearch:
        condition: service_healthy    
    environment:
      - TZ=America/Sao_Paulo
    volumes:
      - ./enterprisesearch/config/enterprise-search.yml:/usr/share/enterprise-search/config/enterprise-search.yml:ro,z
    networks:
      - elk_network
    healthcheck:
      test:
          [
          "CMD-SHELL",
          "curl --fail http://localhost:3002 || exit 1",
          ]
      interval: 10s
      timeout: 10s
      retries: 120    
  ########Kibana
  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:${ELK_VERSION}
    ports:
      - 5601:5601
    depends_on:
      elasticsearch:
        condition: service_healthy    
    environment:
      - TZ=America/Sao_Paulo
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,z
    networks:
      - elk_network
    healthcheck:
      test:
          [
          "CMD-SHELL",
          "curl --fail http://localhost:5601 || exit 1",
          ]
      interval: 10s
      timeout: 10s
      retries: 120

  ############### initializer
  # initializer:
  #   container_name: curl
  #   image: curlimages/curl
  #   restart: on-failure
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy
  #   networks:
  #     - elk_network
  #   volumes:
  #     - ./mappings/index-user-request-track.mapping.json:/tmp/mappings/index-user-request-track.mapping.json
  #   command: ["sh","-c","sleep 1 && curl --fail -X POST '${ELASTICSEARCH_URL}/_index_template/siga-sigaex-user-request-track-template' -H 'Content-Type: application/json' -d @/tmp/mappings/index-user-request-track.mapping.json || exit 1" ]
  # filebeat:
  #   container_name: filebeat
  #   image: docker.elastic.co/beats/filebeat:${ELK_VERSION}
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy    
  #     kibana:
  #       condition: service_healthy    
  #   entrypoint: "filebeat -e -strict.perms=false"
  #   restart: unless-stopped
  #   volumes:
  #     - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro,z
  #     - ./filebeat/fields.yml:/usr/share/filebeat/fields.yml:ro,z
  #     - ./filebeat/inputs/siga-sigaex-user-request-track.yml:/usr/share/filebeat/inputs.d/siga-sigaex-user-request-track.yml:ro,z
  #     - <<: *eventstore-volume-logs
  #   networks:
  #     - elk_network